{
  "version": 3,
  "sources": ["../src/index.js", "../src/partial.js", "../src/utils.js", "../src/flag-x.js"],
  "sourcesContent": ["//! Regex.make 0.1.0 alpha; Steven Levithan; MIT License\n// Context-aware regex template strings with batteries included\n\nimport { transformForFlagX } from \"./flag-x.js\";\nimport { PartialPattern, partial } from \"./partial.js\";\nimport { CharClassContext, RegexContext, containsCharClassUnion, escapeV, getBreakoutChar, getEndContextForIncompletePattern, patternModsOn, replaceUnescaped, sandboxLoneDoublePunctuatorChar, sandboxUnsafeNulls } from './utils.js';\n\n/**\nTemplate tag for constructing a UnicodeSets-mode RegExp with advanced features and safe,\ncontext-aware interpolation of regexes, escaped strings, and partial patterns.\n\nCan be called in multiple ways:\n1. `` Regex.make`\u2026` `` - Regex pattern as a raw string.\n2. `` Regex.make('gis')`\u2026` `` - To specify flags.\n3. `` Regex.make.bind(RegExpSubclass)`\u2026` `` - With a `this` that specifies a different constructor.\n@param {string | TemplateStringsArray} first Flags or a template.\n@param {...any} [values] Values to fill the template holes.\n@returns {RegExp | (TemplateStringsArray, ...any) => RegExp}\n*/\nfunction make(first, ...values) {\n  // Allow binding to other constructors\n  const constructor = this instanceof Function ? this : RegExp;\n  // Given a template\n  if (Array.isArray(first?.raw)) {\n    return makeFromTemplate(constructor, '', first, ...values);\n  // Given flags\n  } else if ((typeof first === 'string' || first === undefined) && !values.length) {\n    return makeFromTemplate.bind(null, constructor, first ?? '');\n  }\n  throw new Error(`Unexpected arguments: ${JSON.stringify([first, ...values])}`);\n}\n\n/**\nMakes a UnicodeSets-mode RegExp from a template and values to fill the template holes.\n@param {RegExpConstructor} constructor\n@param {string} flags\n@param {TemplateStringsArray} template\n@param {...any} values\n@returns {RegExp}\n*/\nfunction makeFromTemplate(constructor, flags, template, ...values) {\n  if (/[vu]/.test(flags)) {\n    throw new Error('Flags v/u cannot be explicitly added since v is always enabled');\n  }\n\n  // Apply implicit flag x\n  ({template, values} = transformForFlagX(template, values));\n\n  // To keep output cleaner for simple string escaping, don't start wrapping/sandboxing\n  // interpolated values until something triggers the need for it\n  let wrap = false;\n  let runningContext = {};\n  let pattern = '';\n  // Intersperse template raw strings and values\n  template.raw.forEach((raw, i) => {\n    if (raw !== '') {\n      wrap = true;\n    }\n    // Sandbox `\\0` in character classes. Not needed outside classes because in other cases a\n    // following interpolated value would always be atomized\n    pattern += sandboxUnsafeNulls(raw, RegexContext.CHAR_CLASS);\n    runningContext = getEndContextForIncompletePattern(pattern, runningContext);\n    const {regexContext, charClassContext} = runningContext;\n    if (i < template.raw.length - 1) {\n      let value = values[i];\n      if (value instanceof RegExp || value instanceof PartialPattern) {\n        wrap = true;\n      }\n      const transformedValue = interpolate(value, flags, regexContext, charClassContext, wrap);\n      pattern += transformedValue;\n    }\n  });\n  return new constructor(pattern, `v${flags}`);\n}\n\nfunction interpolate(value, flags, regexContext, charClassContext, wrap) {\n  if (value instanceof RegExp && regexContext !== RegexContext.DEFAULT) {\n    throw new Error('Cannot interpolate a RegExp at this position because the syntax context does not match');\n  }\n  if (regexContext === RegexContext.INVALID_INCOMPLETE_TOKEN || charClassContext === CharClassContext.INVALID_INCOMPLETE_TOKEN) {\n    // Throw in all cases, but only *need* to handle a preceding unescaped backslash (which would\n    // break sandboxing) since other errors would be handled by the invalid generated regex syntax\n    throw new Error('Interpolation preceded by invalid incomplete token');\n  }\n  const isPartial = value instanceof PartialPattern;\n  let escapedValue;\n  if (!(value instanceof RegExp)) {\n    value = String(value);\n    if (!isPartial) {\n      escapedValue = escapeV(value, regexContext);\n    }\n    // Check within escaped values (not just partials) since possible breakout char > isn't escaped\n    const breakoutChar = getBreakoutChar(escapedValue || value, regexContext, charClassContext);\n    if (breakoutChar) {\n      throw new Error(`Unescaped stray \"${breakoutChar}\" in the interpolated value would have side effects outside it`);\n    }\n  }\n\n  if (\n    regexContext === RegexContext.ENCLOSED_TOKEN ||\n    regexContext === RegexContext.INTERVAL_QUANTIFIER ||\n    regexContext === RegexContext.GROUP_NAME ||\n    charClassContext === CharClassContext.ENCLOSED_TOKEN ||\n    charClassContext === CharClassContext.Q_TOKEN\n  ) {\n    return isPartial ? value : escapedValue;\n  } else if (regexContext === RegexContext.CHAR_CLASS) {\n    // `CharClassContext.DEFAULT`\n    if (isPartial) {\n      const sandboxedValue = sandboxLoneDoublePunctuatorChar(value);\n      // Atomize via nested character class `[\u2026]` if it contains implicit or explicit union (check\n      // the unadjusted value)\n      return containsCharClassUnion(value) ? `[${sandboxedValue}]` : sandboxUnsafeNulls(sandboxedValue);\n    }\n    // Atomize via nested character class `[\u2026]` if more than one node\n    return containsCharClassUnion(escapedValue) ? `[${escapedValue}]` : escapedValue;\n  }\n  // `RegexContext.DEFAULT`\n  if (value instanceof RegExp) {\n    const transformed = transformForFlags(value, flags);\n    // Sandbox and atomize; if we used a pattern modifier it has the same effect\n    return transformed.usedModifier ? transformed.value : `(?:${transformed.value})`;\n  }\n  if (isPartial) {\n    // Sandbox and atomize\n    return `(?:${value})`;\n  }\n  // Sandbox and atomize; this is the only place checking `wrap` since it's true in all other cases\n  return wrap ? `(?:${escapedValue})` : escapedValue;\n}\n\nfunction transformForFlags(regex, outerFlags) {\n  const modFlagsObj = {\n    i: null,\n    m: null,\n    s: null,\n  };\n  const newlines = '\\\\n\\\\r\\\\u2028\\\\u2029';\n  let value = regex.source;\n\n  if (regex.ignoreCase !== outerFlags.includes('i')) {\n    if (patternModsOn) {\n      modFlagsObj.i = regex.ignoreCase;\n    } else {\n      throw new Error('Pattern modifiers not supported, so the value of flag i on the interpolated RegExp must match the outer regex');\n    }\n  }\n  if (regex.dotAll !== outerFlags.includes('s')) {\n    if (patternModsOn) {\n      modFlagsObj.s = regex.dotAll;\n    } else {\n      value = replaceUnescaped(value, '\\\\.', (regex.dotAll ? '[^]' : `[^${newlines}]`), RegexContext.DEFAULT);\n    }\n  }\n  if (regex.multiline !== outerFlags.includes('m')) {\n    if (patternModsOn) {\n      modFlagsObj.m = regex.multiline;\n    } else {\n      value = replaceUnescaped(value, '\\\\^', (regex.multiline ? `(?<=^|[${newlines}])` : '(?<![^])'), RegexContext.DEFAULT);\n      value = replaceUnescaped(value, '\\\\$', (regex.multiline ? `(?=$|[${newlines}])` : '(?![^])'), RegexContext.DEFAULT);\n    }\n  }\n\n  if (patternModsOn) {\n    const keys = Object.keys(modFlagsObj);\n    let modifier = keys.filter(k => modFlagsObj[k] === true).join('');\n    const modOff = keys.filter(k => modFlagsObj[k] === false).join('');\n    if (modOff) {\n      modifier += `-${modOff}`;\n    }\n    if (modifier) {\n      return {\n        value: `(?${modifier}:${value})`,\n        usedModifier: true,\n      };\n    }\n  }\n  return {value};\n}\n\nconst Regex = {\n  make,\n  partial,\n};\n\nexport { make, partial };\nexport default Regex;\n", "export class PartialPattern {\n  #value;\n  constructor(pattern) {\n    this.#value = pattern;\n  }\n  toString() {\n    return String(this.#value);\n  }\n}\n\n/**\nCan be called in two ways:\n1. `Regex.partial(value)` - For strings or values coerced to strings\n2. `` Regex.partial`\u2026` `` - Shorthand for ``Regex.partial(String.raw`\u2026`)``\n@param {any} first\n@param {...any} [values] Values to fill the template holes.\n@returns {PartialPattern}\n*/\nexport function partial(first, ...values) {\n  if (Array.isArray(first?.raw)) {\n    return new PartialPattern(\n      // Intersperse template raw strings and values\n      first.raw.flatMap((raw, i) => i < first.raw.length - 1 ? [raw, values[i]] : raw).join('')\n    );\n  } else if (!values.length) {\n    return new PartialPattern(first ?? '');\n  }\n  throw new Error(`Unexpected arguments: ${JSON.stringify([first, ...values])}`);\n}\n", "export const RegexContext = {\n  DEFAULT: 'R_DEFAULT',\n  CHAR_CLASS: 'R_CHAR_CLASS',\n  GROUP_NAME: 'R_GROUP_NAME',\n  ENCLOSED_TOKEN: 'R_ENCLOSED_TOKEN',\n  INTERVAL_QUANTIFIER: 'R_INTERVAL_QUANTIFIER',\n  INVALID_INCOMPLETE_TOKEN: 'R_INVALID_INCOMPLETE_TOKEN',\n};\n\nexport const CharClassContext = {\n  DEFAULT: 'CC_DEFAULT',\n  ENCLOSED_TOKEN: 'CC_ENCLOSED_TOKEN',\n  Q_TOKEN: 'CC_Q_TOKEN',\n  INVALID_INCOMPLETE_TOKEN: 'CC_INVALID_INCOMPLETE_TOKEN',\n};\n\nexport const patternModsOn = (() => {\n  let supported = true;\n  try {\n    new RegExp('(?i-ms:)');\n  } catch (e) {\n    supported = false;\n  }\n  return supported;\n})();\n\nconst doublePunctuatorChars = '&!#$%*+,.:;<=>?@^`~';\n\nexport function escapeV(str, regexContext) {\n  if (regexContext === RegexContext.CHAR_CLASS) {\n    // Escape all double punctuators (including ^, which is special on its own in the first\n    // position) in case they're bordered by the same character in or outside of the escaped string\n    return str.replace(new RegExp(String.raw`[()\\[\\]{}|\\\\/\\-${doublePunctuatorChars}]`, 'g'), '\\\\$&');\n  }\n  return str.replace(/[()\\[\\]{}|\\\\^$*+?.]/g, '\\\\$&');\n}\n\nexport function sandboxLoneDoublePunctuatorChar(str) {\n  // Sandbox without escaping by repeating the character and escaping only the first one. The\n  // second one is so that, if followed by the same symbol, the double punctuator will still throw\n  // as expected. Can't just wrap in nested `[\u2026]` since it might be used in a range. Only need to\n  // check the first position because, if it's part of an implicit union, interpolation handling\n  // will wrap it in nested `[\u2026]`. Can't add a second unescaped symbol if a lone symbol is the\n  // entire string because then it won't be wrapped and it might be followed by the same unescaped\n  // symbol outside the interpolation. This also takes care of sandboxing a leading `^` so it can't\n  // change the meaning of the surrounding character class if we happen to be at the first position\n  return str.replace(new RegExp(`^[${doublePunctuatorChars}]`), (m, pos) => {\n    return `\\\\${m}${pos + 1 === str.length ? '' : m}`;\n  });\n}\n\n// Regex.make`[\\0${0}]` and Regex.make`[${Regex.partial`\\0`}0]` can't be guarded against via\n// nested `[\u2026]` sandboxing in character classes if the interpolated value doesn't contain union\n// (since it might be placed on a range boundary). So escape \\0 in character classes as \\u{0}\nexport function sandboxUnsafeNulls(str, inRegexContext) {\n  return replaceUnescaped(str, String.raw`\\\\0(?!\\d)`, '\\\\u{0}', inRegexContext);\n}\n\n// Look for characters that would change the meaning of subsequent tokens outside an interpolated value\nexport function getBreakoutChar(pattern, regexContext, charClassContext) {\n  const escapesRemoved = pattern.replace(/\\\\./gsu, '');\n  // Trailing unescaped `\\`. `escapesRemoved.includes('\\\\')` would also work\n  if (escapesRemoved.at(-1) === '\\\\') {\n    return '\\\\';\n  }\n  if (regexContext === RegexContext.DEFAULT) {\n    if (escapesRemoved.includes(')')) {\n      return ')';\n    }\n  }\n  if (regexContext === RegexContext.CHAR_CLASS && charClassContext === CharClassContext.DEFAULT) {\n    // Look for unescaped `]` that is not part of a self-contained nested class\n    let numOpen = 0;\n    for (const [m] of escapesRemoved.matchAll(/[\\[\\]]/g)) {\n      numOpen += m === '[' ? 1 : -1;\n      if (numOpen < 0) {\n        return ']';\n      }\n    }\n  }\n  if (\n    regexContext === RegexContext.ENCLOSED_TOKEN ||\n    regexContext === RegexContext.INTERVAL_QUANTIFIER ||\n    charClassContext === CharClassContext.ENCLOSED_TOKEN ||\n    charClassContext === CharClassContext.Q_TOKEN\n  ) {\n    if (escapesRemoved.includes('}')) {\n      return '}';\n    }\n  }\n  if (regexContext === RegexContext.GROUP_NAME) {\n    if (escapesRemoved.includes('>')) {\n      return '>';\n    }\n  }\n  return '';\n}\n\n// Only added the partial and complete versions of c/u/x tokens for `transformForFlagX`; otherwise\n// would only need to know about trailing unescaped backslash\nexport const contextToken = new RegExp(String.raw`\n  (?<groupN> \\(\\?< (?! [=!] ) | \\\\k< )\n| (?<enclosedT> \\\\[pPu]\\{ )\n| (?<qT> \\\\q\\{ )\n| (?<intervalQ> \\{ )\n| (?<incompleteT> \\\\ (?:\n    $\n  | c (?! [A-Za-z] )\n  | u (?! [A-Fa-f\\d]{4} ) [A-Fa-f\\d]{0,3}\n  | x (?! [A-Fa-f\\d]{2} ) [A-Fa-f\\d]?\n  )\n)\n| \\\\ (?:\n    c [A-Za-z]\n  | u [A-Fa-f\\d]{4}\n  | x [A-Fa-f\\d]{2}\n)\n| \\\\.\n| .\n`.replace(/\\s+/g, ''), 'gsu');\n\n// Accepts and returns its full state so it doesn't have to reprocess pattern parts that it's\n// already seen. Assumes flag v and doesn't worry about syntax errors that are caught by it\nexport function getEndContextForIncompletePattern(partialPattern, {\n  regexContext = RegexContext.DEFAULT,\n  charClassContext = CharClassContext.DEFAULT,\n  charClassDepth = 0,\n  lastPos = 0,\n}) {\n  contextToken.lastIndex = lastPos;\n  let match;\n  while (match = contextToken.exec(partialPattern)) {\n    const {0: m, groups: {groupN, enclosedT, qT, intervalQ, incompleteT}} = match;\n    if (m === '[') {\n      charClassDepth++;\n      regexContext = RegexContext.CHAR_CLASS;\n      charClassContext = CharClassContext.DEFAULT;\n    } else if (m === ']' && regexContext === RegexContext.CHAR_CLASS) {\n      if (charClassDepth) {\n        charClassDepth--;\n      }\n      if (!charClassDepth) {\n        regexContext = RegexContext.DEFAULT;\n      }\n      // Reset for accuracy, but it will end up being an error if there is an unclosed context\n      // (ex: `\\q{\u2026` without closing `}`) in the character class\n      charClassContext = CharClassContext.DEFAULT;\n    } else if (regexContext === RegexContext.CHAR_CLASS) {\n      if (incompleteT) {\n        charClassContext = CharClassContext.INVALID_INCOMPLETE_TOKEN;\n      } else if (enclosedT) {\n        charClassContext = CharClassContext.ENCLOSED_TOKEN;\n      } else if (qT) {\n        charClassContext = CharClassContext.Q_TOKEN;\n      } else if (\n        (m === '}' && (charClassContext === CharClassContext.ENCLOSED_TOKEN || charClassContext === CharClassContext.Q_TOKEN)) ||\n        // Don't want to continue in this context if we've advanced another token\n        charClassContext === CharClassContext.INVALID_INCOMPLETE_TOKEN\n      ) {\n        charClassContext = CharClassContext.DEFAULT;\n      }\n    } else {\n      if (incompleteT) {\n        regexContext = RegexContext.INVALID_INCOMPLETE_TOKEN;\n      } else if (groupN) {\n        regexContext = RegexContext.GROUP_NAME;\n      } else if (enclosedT) {\n        regexContext = RegexContext.ENCLOSED_TOKEN;\n      } else if (intervalQ) {\n        regexContext = RegexContext.INTERVAL_QUANTIFIER;\n      } else if (\n        (m === '>' && regexContext === RegexContext.GROUP_NAME) ||\n        (m === '}' && (regexContext === RegexContext.ENCLOSED_TOKEN || regexContext === RegexContext.INTERVAL_QUANTIFIER)) ||\n        // Don't want to continue in this context if we've advanced another token\n        regexContext === RegexContext.INVALID_INCOMPLETE_TOKEN\n       ) {\n        regexContext = RegexContext.DEFAULT;\n      }\n    }\n  }\n  return {\n    regexContext,\n    charClassContext,\n    charClassDepth,\n    lastPos: partialPattern.length - 1,\n  };\n}\n\n/**\nReplaces tokens only when they're unescaped and in the given context.\nDoesn't skip over complete multicharacter tokens (only `\\` and folowing char) so must be used with\nknowledge of what's safe to do given regex syntax.\nAssumes flag v and doesn't worry about syntax errors that are caught by it.\n@param {string} input \n@param {string} needle Search as regex pattern\n@param {string} replacement \n@param {RegexContext.DEFAULT | RegexContext.CHAR_CLASS} [inRegexContext]\n@returns {string}\n@example\nreplaceUnescaped(String.raw`.\\.\\\\.\\\\\\.[[\\.].].`, '\\\\.', '~');\n// -> String.raw`~\\.\\\\~\\\\\\.[[\\.]~]~`\nreplaceUnescaped(String.raw`.\\.\\\\.\\\\\\.[[\\.].].`, '\\\\.', '~', RegexContext.DEFAULT);\n// -> String.raw`~\\.\\\\~\\\\\\.[[\\.].]~`\n*/\nexport function replaceUnescaped(input, needle, replacement, inRegexContext) {\n  const regex = new RegExp(String.raw`(?!${needle})\\\\.|(?<found>${needle})|.`, 'gsu');\n  let numCharClassesOpen = 0;\n  let result = '';\n  for (const {0: m, groups: {found}} of input.matchAll(regex)) {\n    if (found && (!inRegexContext || (inRegexContext === RegexContext.DEFAULT) === !numCharClassesOpen)) {\n      result += replacement;\n      continue;\n    }\n\n    if (m === '[') {\n      numCharClassesOpen++;\n    } else if (m === ']') {\n      numCharClassesOpen--;\n    }\n    result += m;\n  }\n  return result;\n}\n\nconst propertiesOfStringsNames = [\n  'Basic_Emoji',\n  'Emoji_Keycap_Sequence',\n  'RGI_Emoji_Modifier_Sequence',\n  'RGI_Emoji_Flag_Sequence',\n  'RGI_Emoji_Tag_Sequence',\n  'RGI_Emoji_ZWJ_Sequence',\n  'RGI_Emoji',\n].join('|');\n\n// Assumes flag v and doesn't worry about syntax errors that are caught by it\nexport function containsCharClassUnion(charClassPattern) {\n  // Return `true` if contains:\n  // - Lowercase `\\p` and name is a property of strings (case sensitive).\n  // - `\\q`.\n  // - Two single-char-matching tokens in sequence.\n  // - One single-char-matching token followed immediately by unescaped `[`.\n  // - One single-char-matching token preceded immediately by unescaped `]`.\n  // Else, `false`.\n  // Ranges with `-` create a single token.\n  // Subtraction and intersection with `--` and `&&` create a single token.\n  // Supports any number of nested classes\n  const regex = new RegExp(String.raw`\n\\\\ (?:\n    c [A-Za-z]\n  | p \\{ (?<pPropOfStr> ${propertiesOfStringsNames} ) \\}\n  | [pP] \\{ [^\\}]+ \\}\n  | (?<qPropOfStr> q )\n  | u (?: [A-Fa-f\\d]{4} | \\{ [A-Fa-f\\d]+ \\} )\n  | x [A-Fa-f\\d]{2}\n  | .\n)\n| --\n| &&\n| .\n  `.replace(/\\s+/g, ''), 'gsu');\n  let hasFirst = false;\n  let lastM;\n  for (const {0: m, groups} of charClassPattern.matchAll(regex)) {\n    if (groups.pPropOfStr || groups.qPropOfStr) {\n      return true;\n    }\n    if (m === '[' && hasFirst) {\n      return true;\n    }\n    if (['-', '--', '&&'].includes(m)) {\n      hasFirst = false;\n    } else if (!['[', ']'].includes(m)) {\n      if (hasFirst || lastM === ']') {\n        return true;\n      }\n      hasFirst = true;\n    }\n    lastM = m;\n  }\n  return false;\n}\n", "import { PartialPattern, partial } from \"./partial.js\";\nimport { CharClassContext, RegexContext, contextToken, getEndContextForIncompletePattern } from \"./utils.js\";\n\n// TODO: Remove some unneeded (?:)\n\nexport function transformForFlagX(template, values) {\n  let newTemplate = {raw: []};\n  let newValues = [];\n  let runningContext = {};\n  template.raw.forEach((raw, i) => {\n    const result = process(raw, {...runningContext, lastPos: 0});\n    newTemplate.raw.push(result.transformedPattern);\n    runningContext = result.runningContext;\n    if (i < template.raw.length - 1) {\n      const value = values[i];\n      if (value instanceof PartialPattern) {\n        const result = process(value, {...runningContext, lastPos: 0});\n        newValues.push(partial(result.transformedPattern));\n        runningContext = result.runningContext;\n      } else {\n        newValues.push(value);\n      }\n    }\n  });\n  return {\n    template: newTemplate,\n    values: newValues,\n  };\n}\n\nfunction process(value, runningContext) {\n  value = String(value);\n  const ws = /^\\s$/;\n  const charClassWs = /^[ \\t]$/;\n  let ignoringWs = false;\n  let ignoringCharClassWs = false;\n  let ignoringComment = false;\n  let pattern = '';\n  let transformedPattern = '';\n  for (const [m] of value.matchAll(contextToken)) {\n    pattern += m;\n    runningContext = getEndContextForIncompletePattern(pattern, runningContext);\n    const {regexContext, charClassContext} = runningContext;\n\n    if (ignoringComment) {\n      if (m === '\\n') {\n        ignoringComment = false;\n        // TODO: Allow following quantifer\n        transformedPattern += '(?:)';\n      }\n      continue;\n    }\n    if (ignoringWs) {\n      if (ws.test(m)) {\n        continue;\n      }\n      ignoringWs = false;\n      // TODO: Allow following quantifer\n      transformedPattern += '(?:)';\n    }\n    if (ignoringCharClassWs) {\n      if (charClassWs.test(m)) {\n        continue;\n      }\n      ignoringCharClassWs = false;\n    }\n\n    if (regexContext === RegexContext.DEFAULT) {\n      if (ws.test(m)) {\n        ignoringWs = true;\n      } else if (m === '#') {\n        ignoringComment = true;\n      } else {\n        transformedPattern += m;\n      }\n    } else if (regexContext === RegexContext.CHAR_CLASS) {\n      if (charClassWs.test(m) && (charClassContext === CharClassContext.DEFAULT || charClassContext === CharClassContext.Q_TOKEN)) {\n        ignoringCharClassWs = true;\n      } else if (charClassContext === CharClassContext.INVALID_INCOMPLETE_TOKEN) {\n        // Need to handle this here since the main regex parsing code wouldn't know where the token\n        // ends if we removed whitespace after it\n        throw new Error(`Invalid incomplete token in character class: ${m}`);\n      } else {\n        if (charClassContext === CharClassContext.DEFAULT) {\n          // TODO: Contentually sandbox or escape `\\0`, `-`, and lone double-punctuator symbols\n        }\n        transformedPattern += m;\n      }\n    } else {\n      transformedPattern += m;\n    }\n  }\n  return {\n    transformedPattern,\n    runningContext,\n  };\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "src_default", "make", "partial", "PartialPattern", "#value", "pattern", "partial", "first", "values", "raw", "i", "RegexContext", "CharClassContext", "patternModsOn", "supported", "doublePunctuatorChars", "escapeV", "str", "regexContext", "sandboxLoneDoublePunctuatorChar", "m", "pos", "sandboxUnsafeNulls", "inRegexContext", "replaceUnescaped", "getBreakoutChar", "pattern", "charClassContext", "escapesRemoved", "numOpen", "contextToken", "getEndContextForIncompletePattern", "partialPattern", "charClassDepth", "lastPos", "match", "groupN", "enclosedT", "qT", "intervalQ", "incompleteT", "input", "needle", "replacement", "regex", "numCharClassesOpen", "result", "found", "propertiesOfStringsNames", "containsCharClassUnion", "charClassPattern", "hasFirst", "lastM", "groups", "transformForFlagX", "template", "values", "newTemplate", "newValues", "runningContext", "raw", "i", "result", "process", "value", "PartialPattern", "partial", "ws", "charClassWs", "ignoringWs", "ignoringCharClassWs", "ignoringComment", "pattern", "transformedPattern", "m", "contextToken", "getEndContextForIncompletePattern", "regexContext", "charClassContext", "RegexContext", "CharClassContext", "make", "first", "values", "constructor", "makeFromTemplate", "flags", "template", "transformForFlagX", "wrap", "runningContext", "pattern", "raw", "i", "sandboxUnsafeNulls", "RegexContext", "getEndContextForIncompletePattern", "regexContext", "charClassContext", "value", "PartialPattern", "transformedValue", "interpolate", "CharClassContext", "isPartial", "escapedValue", "escapeV", "breakoutChar", "getBreakoutChar", "sandboxedValue", "sandboxLoneDoublePunctuatorChar", "containsCharClassUnion", "transformed", "transformForFlags", "regex", "outerFlags", "modFlagsObj", "newlines", "patternModsOn", "replaceUnescaped", "keys", "modifier", "k", "modOff", "Regex", "partial", "src_default", "Regex"]
}
